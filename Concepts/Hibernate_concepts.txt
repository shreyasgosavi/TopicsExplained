Hibernate 

TERMS :
 	BEAN	
	ORM

Steps :
	1. Create the Bean.
	2. Set the properties Of the bean.
	3. Create the configuration file.	(Defines the sql configuration along hibernate properties)
	4. In the main class create the Object whose data we want to save.
	5. Create Configuration class, SessionFactory, Session .
	6. Commiting the changes at the end if want to update the data.


	
Using the hibernate framework we are going to save the value of the properities of the object directly into the table.

Methods :
	save()		<--	Available in the Session interface present in the hibernate framework
	Session()		<--	Interface which creates the session from the SessionFactory interface.
	SessionFactory()	<--	Interface that builds the session based on the configuration provided by Configuration class.
	Configuration	<--	Class which sets the configuration provided by the user for further use.
	
Configuration:
	For configuration we need to provide the XML file which will have tags related to the hibernate configuration.
	

	<!DOCTYPE hibernate-configuration SYSTEM 
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">	<-- Header is important which has the attiribute definition.

	<hibernate-configuration>

		<session-factory>
			<property name = "P1" > Value1 </property>
			<property name = "P2" > Value2 </property>
		</session-factory>

	</hibernate-configuration>

Mapping File :
	To map the class with the table of the database.

	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
	
	<hibernate-mapping>
		<class name = "bean_name" column = "db_table_name">
			<id name = "property_name" column = "cname"> 
				<generator class = "assigned"/>		<-- We specify the Primary key	
			</id>
			<property name = "property_name" column  = "" />
		</class>
	</hibernate-mapping>

	
	The mapping file is mentioned in the hibernate configuration file.
	We can eliminate the mapping files with the help of the annotations. 

Annotations :
	In the bean class we add @Entity annotation for referring to the table.
	@Id annotation is used to identify the primary key.


Fetching Strategy in Hibernate :
	
		1. Lazy-Initialization	: Intializing the object when it is needed. Here we initialize only first-level member objects.
		2. Eager-Initialization	: Fetches all the related Data.

Caching in Hibernate :
		
	Levels Of Cache's :

		1. First Level Cache (Default) :	
			Cache stores the accessed value in it and is available for that session only.
			If the data is already available in the cache then the db access is not required.		

		2. Second Level Cache :
			Here the data stored in a cache is accessible to all the sessions, configuration is required.


	We configure the caching in the configuration file where we mention the permission and the provider of the caching strategy.
	We make use of third-party caching service provider. (eh-cache)
	Finally we need to specify the entity that supports caching, we do that with the help of annotation.
	@Cachable and @Cache

 HQL: 
	Hibernate-Query Language - It is the language used in hibernate framework to query the database in different fashion.
					   It can be used to perform complex queries which the defined methods of hibernate can't. 
	
	Comparing SQL and HQL :
		Lets assume we have a student table which has the attributes 'student_id', 'student_name', 'student_rollNo'.

	Eg : We need to get all the roll-numbers from the student table.
	
	SQL : Select student_rollNo from student;		<--  	In SQL student_rollNo is column and Student is a table.
	HQL : Select student_rollNo from Student;		<-- 	In SQL student_rollNo is property and Student is a class hence it has to be
										capital.

	Eg : Get all the data from the Student table.
	
	SQL : Select * from Student;
	HQL : from Student

	Note : If we want to use "SQL" in Hibernate then we need to make use of "native-query".
	
	We use Query class of hibernate to pass the query.
	Before that we create the session.	

	Case1	: 
		Select all data from the Student Table.	
	
		Configuration cfg = new Configuration().configure("hibernate.cfgmtomany.cfg.xml").addAnnotatedClass(Human.class);
		SessionFactory sf = cfg.buildSessionFactory();
		Session s = sf.createSession();
		
		Query q = s.createSession("from Student");
		
		The result is in the form of list of objects.
	
		List<Student> s_list = q.getList();

		In SQL we used to get the resultSet nd then we used to iterate through it.

	Case2	:
		Fetching one data from the database.

		In this case we know that the fetched data will be unique and hence we need to make use of the different method.

		Query q = s.createSession("From Student where student_rollNo = 2");	
		Student s1 = q.uniqueResult();

		We will get the Student Object from the operation.

	Case3	:
		Fetching specific columns from the Table.
		
		Here the data-type of the resultant Object is not known hence the result is the array of Objects. 
		Letss see :

		Query q = s.createQuery(Select student_id, student_name from Student where student_id = 2);

		Object[] result = (Object[]) q.uniqueResult()

	Case4	:
		Fetching multiple rows of specific columns.
		
		In this case we need the List<Object[]> in order to store the data in an object so we will use the
		list() method to get the Collection of data.


	
	Passing custom values in the query (like PreparedStatement in MYSQL jdbc).
		
		To pass custom value we place ':' before the variable in the query.
	
		Eg :	int a = 20;
			Query q = session.createQuery("Select sum(student_marks) from Student where student_rollNo = :a");	
			q.setParameter("a",a);
	
			Long marksData = (Long)q.uniqueResult();


	Hibernate States :
	
	While working with the hibernate we create objects and with the help of O.R.M. we store it in the database. 
	The process from creation of the objects to storing the contents in the database goes through several states
	behind the scene.

	
	States of objects in hibernate :
		1. Transient State
		2. Persistant State
		3. Detatched
		4. Removed
		5. End state (Garbage Collection)

	Comparing Hibernate get() and load() methods :
		
		Both methods are used to fetch the data from the database, but their way of performing the action varies.
		
		get() method fires the query once the method is invoked whereas load() method fires the query only if the 
		object is used in further steps.
	
		get() method returns null when no data is found in the database where-as load() method returns an exception
		when no data is found.

	





	